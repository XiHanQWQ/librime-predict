name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:  # 允许手动触发
  release:
    types: [published]  # 当创建发布时触发

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout last commit
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install clang-format
        run: sudo apt install -y clang-format curl
      - name: Lint
        run: find src tools -name '*.cc' -o -name '*.h' | xargs clang-format -Werror --dry-run || { echo Please lint your code by '"'"find src tools -name '*.cc' -o -name '*.h' | xargs clang-format -i"'"'.; false; }

  build:
    runs-on: ubuntu-24.04
    needs: lint
    strategy:
      matrix:
        build-type: [Release, Debug]
    steps:
      - name: Checkout librime
        uses: actions/checkout@v4
        with:
          repository: rime/librime

      - name: Checkout current repository with full history
        uses: actions/checkout@v4
        with:
          path: plugins/predict
          fetch-depth: 0

      - name: Install dependency
        run: ./action-install-linux.sh

      - name: Build librime with plugin (without ASan)
        run: |
          cmake -B build-${{ matrix.build-type }} -G Ninja -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DENABLE_ASAN=OFF
          cmake --build build-${{ matrix.build-type }}
        env:
          CC: clang
          CXX: clang++

      - name: Check if data directory exists
        run: |
          ls -la plugins/predict/data/
          if [ -f "plugins/predict/data/predict.txt" ]; then
            echo "predict.txt found"
          else
            echo "predict.txt not found, listing data directory:"
            find plugins/predict/data/ -type f
            exit 1
          fi

      - name: Build predict.db from local data
        working-directory: build-${{ matrix.build-type }}/bin
        run: |
          # 确保文件存在
          cp ../../plugins/predict/data/predict.txt ./
          echo "File size: $(wc -l < predict.txt) lines"
          
          # 使用文件输入而不是管道，避免 Broken pipe 错误
          ../plugins/predict/bin/build_predict < predict.txt
          
          # 检查是否成功生成数据库
          if [ -f "predict.db" ]; then
            echo "predict.db successfully created"
            ls -la predict.db
          else
            echo "Error: predict.db was not created"
            exit 1
          fi

      - name: Package build artifacts
        run: |
          mkdir -p dist/${{ matrix.build-type }}
          # 打包 librime 核心文件
          cp -r build-${{ matrix.build-type }}/bin dist/${{ matrix.build-type }}/
          cp -r build-${{ matrix.build-type }}/lib dist/${{ matrix.build-type }}/
          # 打包插件相关文件
          mkdir -p dist/${{ matrix.build-type }}/plugins/predict
          cp -r plugins/predict/data dist/${{ matrix.build-type }}/plugins/predict/
          cp build-${{ matrix.build-type }}/plugins/predict/*.so dist/${{ matrix.build-type }}/plugins/predict/ 2>/dev/null || true
          
          # 创建版本信息文件
          echo "Build Type: ${{ matrix.build-type }}" > dist/${{ matrix.build-type }}/build-info.txt
          echo "Commit: ${{ github.sha }}" >> dist/${{ matrix.build-type }}/build-info.txt
          echo "Date: $(date)" >> dist/${{ matrix.build-type }}/build-info.txt
          
          # 创建压缩包 - 使用运行ID作为唯一标识
          tar -czf librime-predict-${{ matrix.build-type }}-${{ github.run_id }}.tar.gz -C dist/${{ matrix.build-type }} .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          # 使用运行ID作为唯一标识
          name: librime-predict-${{ matrix.build-type }}-${{ github.run_id }}
          path: |
            librime-predict-${{ matrix.build-type }}-${{ github.run_id }}.tar.gz
            build-${{ matrix.build-type }}/bin/predict.db
          if-no-files-found: warn
          compression-level: 6
          overwrite: false

  release:
    runs-on: ubuntu-24.04
    needs: build
    if: github.event_name == 'release' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List downloaded artifacts
        run: find artifacts -type f

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # 使用运行ID作为标签
          tag_name: build-${{ github.run_id }}
          name: "Build ${{ github.run_id }}"
          body: |
            Automated build of librime with predict plugin
            - Commit: ${{ github.sha }}
            - Build ID: ${{ github.run_id }}
            - Date: ${{ github.event.head_commit.timestamp }}
          draft: false
          prerelease: true
          files: |
            artifacts/**/*.tar.gz
            artifacts/**/predict.db

      - name: Display release info
        run: |
          echo "Release created at: ${{ steps.create_release.outputs.upload_url }}"
