name: CI

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:  # 允许手动触发

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout last commit
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
      - name: Install clang-format
        run: sudo apt install -y clang-format curl
      - name: Lint
        run: find src tools -name '*.cc' -o -name '*.h' | xargs clang-format -Werror --dry-run || { echo Please lint your code by '"'"find src tools -name '*.cc' -o -name '*.h' | xargs clang-format -i"'"'.; false; }

  build:
    runs-on: ubuntu-24.04
    needs: lint
    steps:
      - name: Checkout librime
        uses: actions/checkout@v5
        with:
          repository: rime/librime

      - name: Checkout current repository with full history
        uses: actions/checkout@v5
        with:
          path: plugins/predict
          fetch-depth: 0

      - name: Install dependency
        run: ./action-install-linux.sh

      - name: Build librime with plugin (without ASan)
        run: |
          cmake -B build -G Ninja -DCMAKE_BUILD_TYPE=Release -DENABLE_ASAN=OFF
          cmake --build build

      - name: Check data directory and list txt files
        id: check_data
        run: |
          ls -la plugins/predict/data/
          # 查找所有txt文件并输出为空格分隔的列表
          TXT_FILES=$(find plugins/predict/data -name "*.txt" -type f -exec basename {} .txt \; | tr '\n' ' ')
          echo "Found TXT files: $TXT_FILES"
          # 设置输出变量供后续步骤使用
          echo "txt_files=$TXT_FILES" >> $GITHUB_OUTPUT

      - name: Build db files from all txt files in data directory
        working-directory: build/bin
        run: |
          # 为每个txt文件构建对应的db文件
          for txt_file in ${{ steps.check_data.outputs.txt_files }}; do
            echo "Processing $txt_file.txt -> ${txt_file}.db"
            # 删除可能存在的残留文件（确保干净）
            rm -f predict.db
            
            # 复制txt文件
            cp ../../plugins/predict/data/${txt_file}.txt ./
            echo "File size: $(wc -l < ${txt_file}.txt) lines"
            
            # 构建db文件
            ../plugins/predict/bin/build_predict < ${txt_file}.txt
            
            # 检查生成的文件
            if [ ! -f "predict.db" ]; then
              echo "Error: predict.db was not created for ${txt_file}.txt"
              exit 1
            fi
            
            # 重命名逻辑：仅当目标文件名与当前文件名不同时才重命名
            target_file="${txt_file}.db"
            if [ "$target_file" != "predict.db" ]; then
              mv predict.db "$target_file"
              echo "Successfully created $target_file"
            else
              echo "Skipping rename (already named $target_file)"
              # 重命名后文件名已经是目标名，直接使用
              mv predict.db "$target_file"  # 实际上不需要执行，但为了代码一致性保留
            fi
            
            ls -la "$target_file"
          done

      - name: Create release with all db files
        uses: softprops/action-gh-release@v2
        if: success()
        with:
          tag_name: predict-db-${{ github.run_id }}-${{ github.run_attempt }}
          name: Predict DB (${{ github.sha }})
          body: |
            Auto-generated predict database files from CI build
            - Commit: ${{ github.sha }}
            - Run ID: ${{ github.run_id }}
            - Generated files: ${{ steps.check_data.outputs.txt_files }}
          draft: false
          prerelease: false
          files: |
            build/bin/*.db
            build/bin/*.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Artifact (backup)
        uses: actions/upload-artifact@v4
        with:
          name: predict-db-${{ github.run_id }}
          path: |
            build/bin/*.db
            build/bin/*.txt
          # 移除了 retention-days: 30
